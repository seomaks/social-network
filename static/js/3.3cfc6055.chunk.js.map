{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Myposts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","assets/images/heart.png","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","classes","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","alt","target","files","length","initialValues","formData","then","Post","item","message","icon","likeIcon","likesCount","MyPosts","postsElements","profilePage","posts","p","id","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","placeholder","validate","required","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","dispatch","addPostAC","Profile","isAuth","to","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","React","Component","compose","auth","withRouter"],"mappings":"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","file":"static/js/3.3cfc6055.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3D_lU\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3zaeZ\",\"contact\":\"ProfileInfo_contact__2mq84\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"Myposts_postsBlock__KOlwO\",\"posts\":\"Myposts_posts__9GZy8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__214EX\",\"icon\":\"Post_icon__1My9l\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype PropsType = {\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: PropsType) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const [status, setStatus] = useState<string>(props.status)\r\n\r\n  useEffect(() => {setStatus(props.status)}, [props.status])\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n    const deactivateEditMode = () => {\r\n      setEditMode(false)\r\n      props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {!editMode &&\r\n          <div>\r\n            <span\r\n              onDoubleClick={activateEditMode}>{props.status || \"your status is here\"}</span>\r\n          </div>}\r\n        {editMode &&\r\n          <div>\r\n            <input onChange={onStatusChange} autoFocus\r\n                   onBlur={deactivateEditMode} value={status}/>\r\n          </div>}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\n\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\nimport {\r\n  createField,\r\n  Input,\r\n  Textarea\r\n} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n  return <form onSubmit={handleSubmit}>\r\n    <div><button>save</button></div>\r\n    {error && <div className={style.formSummaryError}>\r\n      {error}\r\n    </div>\r\n    }\r\n    <div>\r\n      <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job</b>: { createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\r\n    </div>\r\n\r\n    <div>\r\n      <b>My professional skills</b>:\r\n      { createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\r\n    </div>\r\n    <div>\r\n      <b>About me</b>:\r\n      { createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea  )}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n      return <div key={key} className={classes.contact}>\r\n        <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n      </div>\r\n    })}\r\n    </div>\r\n  </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../redux/profileReducer\";\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader/>\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    saveProfile(formData).then(\r\n      () => {\r\n        setEditMode(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.descriptionBlock}>\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        <img src={profile.photos.large || userPhoto} className={classes.mainPhoto} alt={\"\"}/>\r\n        {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n        { editMode\r\n          ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n          : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  goToEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n  return <div>\r\n    {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n    <div>\r\n      <b>Full name</b>: {profile.fullName}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n    </div>\r\n    {profile.lookingForAJob &&\r\n      <div>\r\n        <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n      </div>\r\n    }\r\n\r\n    <div>\r\n      <b>About me</b>: {profile.aboutMe}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>: {\r\n      Object\r\n        .keys(profile.contacts)\r\n        .map((key)  => {\r\n          return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n        })}\r\n    </div>\r\n  </div>\r\n}\r\n\r\n\r\ntype ContactsPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n  return <div className={classes.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","export default __webpack_public_path__ + \"static/media/heart.a13e3857.png\";","import React from 'react'\r\nimport classes from './Post.module.css';\r\nimport likeIcon from \"../../../../assets/images/heart.png\";\r\n\r\ntype PostType = {\r\n  likesCount: number\r\n  message: string\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img\r\n        src='https://i.pinimg.com/736x/c1/62/15/c162157d47257988b3cfe228479389d0.jpg'\r\n        alt=''/>\r\n      {props.message}\r\n      <div className={classes.icon}>\r\n        <img src={likeIcon} alt={''}/>\r\n        {props.likesCount}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post\r\n","import React from \"react\";\r\nimport classes from './Myposts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {PostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype PostDataType = {\r\n  newPostText: string\r\n}\r\n\r\nconst MyPosts = (props: PostsPropsType) => {\r\n  const postsElements = props.profilePage.posts.map(p => <Post\r\n    likesCount={p.likesCount}\r\n    message={p.message}\r\n    key={p.id}\r\n  />)\r\n\r\n  const maxLength10 = maxLengthCreator(10)\r\n\r\n  let AddNewPostForm: React.FC<InjectedFormProps<PostDataType>> = (props) => {\r\n    return (\r\n      <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n          <Field name=\"newPostText\" component={Textarea}\r\n                 placeholder={\"Post message\"}\r\n                 validate={[required, maxLength10]}/>\r\n        </div>\r\n        <div>\r\n          <button>Add post</button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n\r\n  let AddNewPostFormRedux = reduxForm<PostDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n  const onAddPost = (values: { newPostText: string }) => {\r\n    props.addPost(values.newPostText)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n      <div className={classes.posts}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default MyPosts","import {\r\n  addPostAC,\r\n  InitialStateType\r\n} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype mapStatePropsType = {\r\n  profilePage: InitialStateType\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    addPost: (messageForNewPost: string)=> void\r\n}\r\n\r\nexport type PostsPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n  return {\r\n    profilePage: state.profilePage\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n  return {\r\n    addPost: (newPostText: string) => {\r\n      dispatch(addPostAC(newPostText))\r\n    }\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profileReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n  isAuth: boolean\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile = (props: PropsType) => {\r\n  if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n  return (\r\n    <div>\r\n      <ProfileInfo isOwner={props.isOwner}\r\n                   savePhoto={props.savePhoto}\r\n                   profile={props.profile}\r\n                   status={props.status}\r\n                   saveProfile={props.saveProfile}\r\n                   updateStatus={props.updateStatus}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n  getStatus,\r\n  getUserProfile, ProfileType, savePhoto,\r\n  updateStatus,\r\n  saveProfile\r\n} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n  getUserProfile: (userId: number) => void\r\n  getStatus: (userId: number | string | null) => void\r\n  updateStatus: (status: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n\r\n    if (!userId) {\r\n      console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n    } else {\r\n      this.props.getUserProfile(userId)\r\n      this.props.getStatus(userId)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Profile {...this.props}\r\n                 isOwner={!this.props.match.params.userId}\r\n                 profile={this.props.profile}\r\n                 status={this.props.status}\r\n                 updateStatus={this.props.updateStatus}\r\n                 savePhoto={this.props.savePhoto}\r\n                 isAuth={this.props.isAuth}\r\n                 saveProfile={this.props.saveProfile}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.id,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n  withRouter,\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}